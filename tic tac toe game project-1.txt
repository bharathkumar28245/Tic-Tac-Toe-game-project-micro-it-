<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Tic-Tac-Toe</title>
  <style>
    :root {
      --bg-color: linear-gradient(to right, #0f2027, #203a43, #2c5364);
      --text-color: white;
      --cell-bg: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%);
      --celebration-color: #ff6f61;
    }
    body.light-theme {
      --bg-color: linear-gradient(to right, #e0eafc, #cfdef3);
      --text-color: #333;
      --cell-bg: linear-gradient(135deg, #ffffff, #e0e0e0);
    }
    body {
      margin: 0;
      padding: 0;
      background: var(--bg-color);
      font-family: 'Segoe UI', sans-serif;
      color: var(--text-color);
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
    }
    header {
      width: 100%;
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 1rem;
      box-sizing: border-box;
      animation: fadeIn 1.5s ease;
      margin-bottom: 1cm; /* Added spacing below header */
    }
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(-30px); }
      to { opacity: 1; transform: translateY(0); }
    }
    .settings {
      align-self: flex-start;
      padding-left: 1rem;
    }
    .settings button {
      font-size: 1em;
      cursor: pointer;
      background: #333;
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 10px;
    }
    h1 {
      font-size: 2.5em;
      background: linear-gradient(to right, #ff5f6d, #ffc371);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      margin: 0.5em 0;
      text-align: center;
    }
    h2 {
      font-size: 2em;
      margin: 0;
    }
    #controls {
      display: flex;
      justify-content: center;
      gap: 1em;
      flex-wrap: wrap;
      margin-bottom: 1em;
    }
    button, input {
      padding: 0.7em 1.5em;
      font-size: 1em;
      font-weight: bold;
      border: none;
      border-radius: 10px;
      cursor: pointer;
    }
    .cell {
      width: 100px;
      height: 100px;
      background: var(--cell-bg);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2.5em;
      border-radius: 10px;
      cursor: pointer;
      transition: transform 0.2s;
    }
    .cell:hover {
      transform: scale(1.1);
    }
    #board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      gap: 10px;
    }
    #status {
      margin-top: 1em;
      font-size: 1.5em;
      font-weight: bold;
    }
    #celebrationMessage {
      font-size: 3em;
      font-weight: bold;
      color: var(--celebration-color);
      margin-top: 1em;
      display: none;
      animation: popIn 1s ease;
    }
    @keyframes popIn {
      from { transform: scale(0); opacity: 0; }
      to { transform: scale(1); opacity: 1; }
    }
    #gameOverOverlay {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 2.5em;
      font-weight: bold;
      color: white;
      background: rgba(0, 0, 0, 0.7);
      padding: 20px 40px;
      border-radius: 20px;
      display: none;
      z-index: 10;
    }
    #timer {
      font-size: 1.5em;
      margin-left: 1em;
    }
    #backBtn {
      margin-top: 1em;
      padding: 0.6em 1.2em;
      background: #444;
      color: white;
      border: none;
      border-radius: 10px;
      font-size: 1em;
      cursor: pointer;
      animation: fadeIn 2s ease;
    }
    #restartBtn {
      margin-top: 1em;
      padding: 0.6em 1.2em;
      background: #007BFF;
      color: white;
      border: none;
      border-radius: 10px;
      font-size: 1em;
      cursor: pointer;
      display: none;
      animation: fadeIn 1s ease;
    }
  </style>
</head>
<body>
  <header>
    <div class="settings">
      <button onclick="toggleTheme()">Toggle Theme</button>
    </div>
    <h1>Welcome to</h1>
    <h2>Ultimate Tic-Tac-Toe</h2>
    <div id="timer">Timer: 10s</div>
  </header>
  <div id="controls">
    <button onclick="setGameMode('friend')">Play with Friend</button>
    <button onclick="setGameMode('computer')">Play with Computer</button>
  </div>
  <div id="nameInputs" style="display:none">
    <input id="playerXName" placeholder="Player X Name" />
    <input id="playerOName" placeholder="Player O Name" />
    <button onclick="startGame()">Start Game</button>
  </div>
  <div id="board"></div>
  <div id="status"></div>
  <div id="celebrationMessage"></div>
  <div id="gameOverOverlay">Game Over</div>
  <button id="restartBtn" onclick="resetGame()">Restart Game</button>
  <button id="backBtn" onclick="goBack()">Back</button>

  <script>
    let gameState = Array(9).fill("");
    let currentPlayer = 'X';
    let gameActive = false;
    let gameMode = null;
    let timer;
    let countdown = 10;

    const board = document.getElementById('board');
    const statusText = document.getElementById('status');
    const overlay = document.getElementById('gameOverOverlay');
    const timerDisplay = document.getElementById('timer');
    const celebration = document.getElementById('celebrationMessage');
    const restartBtn = document.getElementById('restartBtn');

    function toggleTheme() {
      document.body.classList.toggle('light-theme');
    }

    function setGameMode(mode) {
      gameMode = mode;
      document.getElementById('controls').style.display = 'none';
      document.getElementById('nameInputs').style.display = 'flex';
      document.getElementById('playerXName').value = 'Player X';
      document.getElementById('playerOName').value = gameMode === 'friend' ? 'Player O' : 'Computer';
    }

    function startGame() {
      resetGame();
    }

    function resetGame() {
      gameState = Array(9).fill("");
      currentPlayer = 'X';
      gameActive = true;
      overlay.style.display = 'none';
      celebration.style.display = 'none';
      restartBtn.style.display = 'none';
      renderBoard();
      statusText.textContent = getPlayerName(currentPlayer) + "'s turn";
      startTimer();
    }

    function renderBoard() {
      board.innerHTML = '';
      gameState.forEach((val, i) => {
        const cell = document.createElement('div');
        cell.className = 'cell';
        cell.textContent = val;
        cell.addEventListener('click', () => handleMove(i));
        board.appendChild(cell);
      });
    }

    function handleMove(index) {
      if (!gameActive || gameState[index]) return;
      gameState[index] = currentPlayer;
      renderBoard();
      const winner = checkWinner();
      if (winner) {
        gameActive = false;
        overlay.style.display = 'block';
        celebration.textContent = (winner === 'Draw') ? "It's a Draw!" : getPlayerName(winner) + " Wins! ðŸŽ‰";
        celebration.style.display = 'block';
        clearInterval(timer);
        restartBtn.style.display = 'inline-block'; // Show restart button
        return;
      }
      currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
      statusText.textContent = getPlayerName(currentPlayer) + "'s turn";
      startTimer();
      if (gameMode === 'computer' && currentPlayer === 'O') {
        setTimeout(() => makeBestMove(), 300);
      }
    }

    function checkWinner() {
      const winPatterns = [
        [0,1,2],[3,4,5],[6,7,8],
        [0,3,6],[1,4,7],[2,5,8],
        [0,4,8],[2,4,6]
      ];
      for (const [a,b,c] of winPatterns) {
        if (gameState[a] && gameState[a] === gameState[b] && gameState[b] === gameState[c]) {
          return gameState[a];
        }
      }
      return gameState.includes("") ? null : 'Draw';
    }

    function startTimer() {
      clearInterval(timer);
      countdown = 10;
      timerDisplay.textContent = Timer: ${countdown}s;
      timer = setInterval(() => {
        countdown--;
        timerDisplay.textContent = Timer: ${countdown}s;
        if (countdown === 0) {
          clearInterval(timer);
          handleMoveAuto();
        }
      }, 1000);
    }

    function handleMoveAuto() {
      if (!gameActive) return;
      currentPlayer = currentPlayer === 'X' ? 'O' : 'X';
      statusText.textContent = getPlayerName(currentPlayer) + "'s turn (Auto Skipped)";
      startTimer();
      if (gameMode === 'computer' && currentPlayer === 'O') {
        setTimeout(() => makeBestMove(), 500);
      }
    }

    function makeBestMove() {
      let bestScore = -Infinity;
      let move;
      for (let i = 0; i < 9; i++) {
        if (gameState[i] === "") {
          gameState[i] = 'O';
          let score = minimax(gameState, 0, false);
          gameState[i] = "";
          if (score > bestScore) {
            bestScore = score;
            move = i;
          }
        }
      }
      handleMove(move);
    }

    function minimax(state, depth, isMax) {
      let winner = checkWinner();
      if (winner === 'O') return 10 - depth;
      if (winner === 'X') return depth - 10;
      if (winner === 'Draw') return 0;

      if (isMax) {
        let best = -Infinity;
        for (let i = 0; i < 9; i++) {
          if (state[i] === "") {
            state[i] = 'O';
            best = Math.max(best, minimax(state, depth + 1, false));
            state[i] = "";
          }
        }
        return best;
      } else {
        let best = Infinity;
        for (let i = 0; i < 9; i++) {
          if (state[i] === "") {
            state[i] = 'X';
            best = Math.min(best, minimax(state, depth + 1, true));
            state[i] = "";
          }
        }
        return best;
      }
    }

    function getPlayerName(player) {
      return document.getElementById('player' + player + 'Name')?.value || Player ${player};
    }

    function goBack() {
      location.reload();
    }
  </script>
</body>
</html>